
pkgname=glibc
pkgver=2.41

dependencies=(
	
	
)
sources=(
	"https://ftp.gnu.org/gnu/glibc/glibc-2.41.tar.xz",
    "https://www.linuxfromscratch.org/patches/lfs/12.3/glibc-2.41-fhs-1.patch"
)

md5sums=(
	'19862601af60f73ac69e067d3e9267d4',
    '9a5997c3452909b1769918c759eff8a2'
)


kraken_prepare() {
	
	tar -xvf "${SOURCE_DIR}/${pkgname}/${pkgname}-${pkgver}.tar.xz" -C "${SOURCE_DIR}/${pkgname}" &&

	cd "${SOURCE_DIR}/${pkgname}/${pkgname}-${pkgver}" &&



    case $(uname -m) in
    i?86)   ln -sfv ld-linux.so.2 $KRAKEN/lib/ld-lsb.so.3
    ;;
    x86_64) ln -sfv ../lib/ld-linux-x86-64.so.2 $KRAKEN/lib64
            ln -sfv ../lib/ld-linux-x86-64.so.2 $KRAKEN/lib64/ld-lsb-x86-64.so.3
    ;;
esac

patch -Np1 -i ../glibc-2.41-fhs-1.patch &&

mkdir -v build &&
cd       build && 
echo "rootsbindir=/usr/sbin" > configparms &&


	../configure                             \
      --prefix=/usr                      \
      --host=$KRAKEN_TGT                    \
      --build=$(../scripts/config.guess) \
      --enable-kernel=5.4                \
      --with-headers=$KRAKEN/usr/include    \
      --disable-nscd                     \
      libc_cv_slibdir=/usr/lib
}

kraken_build() {
	cd "${SOURCE_DIR}/${pkgname}/${pkgname}-${pkgver}" &&
    cd build &&

	make
}

kraken_test() {
	#cd "${SOURCE_DIR}/${pkgname}/${pkgname}-${pkgver}" &&
	#make check
	echo "$pkgname does not come with a test suite nothing to do !"  
    return 0
}

kraken_install() {
	cd "${SOURCE_DIR}/${pkgname}/${pkgname}-${pkgver}" &&
    cd build &&
	make DESTDIR=$KRAKEN install
    return 0
}

kraken_preinstall() {
	echo "If KRAKEN is not properly set, and despite the recommendations, 
    you are building as root,
     the next command will install the newly built Glibc to your host system, 
     which will almost certainly render it unusable.
     So double-check that the environment is correctly set,
      and that you are not root, before running the install  command."

	return 0
}

kraken_postinstall() {
	cd "${SOURCE_DIR}/${pkgname}/${pkgname}-${pkgver}" &&
    cd build &&
    sed '/RTLDLIST=/s@/usr@@g' -i $KRAKEN/usr/bin/ldd
	return 0 
}

kraken_preremove() {
	return
}

kraken_remove() {
	cd "${SOURCE_DIR}/${pkgname}/${pkgname}-${pkgver}" &&
 	make uninstall
	return 0
}

kraken_postremove() {
	return
}

# vim:set ts=4 syntax=sh:
